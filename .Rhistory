<<<<<<< HEAD
}
# Part 4.5 -
my_bday_intro <- make_birthday_intro(my_name, my_age, "10/28/18")
print(my_bday_intro)
my_bday_intro <- make_birthday_intro(my_name, my_age, "10/28/18")
print(my_bday_intro)
# Part 1.7 - counts every instance of the letter e in the introduction
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
install.packages("stringr")
# Part 1.7 - counts every instance of the letter e in the introduction
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
# Part 1.1 - creates a variable for an age
my_age <- 20
# Part 1.2 - creates a variable for a name
my_name <- "Uday Bajaj"
# Part 1.3 - creates a function for an introduction
make_introduction <- function(name, age) {
introduction <- paste(
"Hello, my name is", name,
"and I'm", age, "years old."
)
introduction
}
# Part 1.4 - prints out an introduction using my information
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Part 1.5 - prints out a casual version of the introduction
casual_intro <- sub(
"Hello, my name is", "Hey, I'm",
make_introduction(my_name, my_age)
)
print(casual_intro)
# Part 1.6 - prints out the introduction with every word capitalized
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# Part 1.7 - counts every instance of the letter e in the introduction
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#install.packages("stringr")
#################
#### PART 1 #####
#################
# Part 1.1 - creates a variable for an age
my_age <- 20
# Part 1.2 - creates a variable for a name
my_name <- "Uday Bajaj"
# Part 1.3 - creates a function for an introduction
make_introduction <- function(name, age) {
introduction <- paste(
"Hello, my name is", name,
"and I'm", age, "years old."
)
introduction
}
# Part 1.4 - prints out an introduction using my information
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Part 1.5 - prints out a casual version of the introduction
casual_intro <- sub(
"Hello, my name is", "Hey, I'm",
make_introduction(my_name, my_age)
)
print(casual_intro)
# Part 1.6 - prints out the introduction with every word capitalized
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# Part 1.7 - counts every instance of the letter e in the introduction
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# Part 2.1 - creates a vector containing some books
books <- c("Mist Born", "The Invisible Man", "Ulysses",
"Way of Kings", "Warbreaker", "Holes")
print(books)
# Part 2.2 - prints the first 3 books in the books vector
top_three_books <- books[1:3]
print(top_three_books)
# Part 2.3 - adds a positive review for my favorite books
book_reviews<- paste(books, "is a great read!", spe="")
print(book_reviews)
# Part 2.4 - a function that removes a particular item in a provided vector
#            at a given index, and returns the new vector
remove_books <- function(books_vector, index){
new_list <- books_vector
new_list[index*-1]
}
# Part 2.5 - prints the books vector without the 4th item
books_without_four <- remove_books(books, 4)
print(books_without_four)
# Part 2.6 - creates a variable that stores titles with more than 15 characters
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
# Part 3.1 - creates a variable holding numbers from 1 to 201
numbers <- 1:201
# Part 3.2 - creates a variable holding the squares of numbers from 1 to 201
squared_numbers <- numbers * numbers
# Part 3.3 - prints the mean of the squares of numbers from 1 to 201
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Part 3.4 - prints the median of the squares of the numbers from 1 to 201
squared_median <- median(squared_numbers)
print(squared_mean)
# part 3.5 - creates a variable that stores perfect sqares from 1 to 201
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
#################
#### PART 4 #####
#################
# Part 4.1 - converts the first day of summer from a string to a Date
first_day <- "06/19/18"
summer_break <- as.Date(first_day, "%m/%d/%y")
# Part 4.2 - creates a variable that stores today's date
today <- Sys.Date()
# Part 4.3 - calculates and prints the number of days until summer break
days_to_break <- summer_break - today
print(days_to_break)
# Part 4.4 - a function that takes a name, age, and birthday (in the current
# year) as arguements, and calculates the number of days until the next
# birthday, then returns all of that information in as a string in the form of
# an introduction
make_birthday_intro <- function(name, age, birthday_in_2018){
days_to_birthday <- as.Date(birthday_in_2018,"%m/%d/%y") - Sys.Date()
if(days_to_birthday < 1){
days_to_birthday <- 365 + days_to_birthday
}
paste(make_introduction(name,age), "In", days_to_birthday ,"days, I'll be", age + 1)
}
# Part 4.5 - uses my information in the previous function to create and print
# a detailed introduction for me
my_bday_intro <- make_birthday_intro(my_name, my_age, "10/28/18")
print(my_bday_intro)
# Part 3.1 - creates a variable holding numbers from 1 to 201
numbers <- 1:201
# Part 3.2 - creates a variable holding the squares of numbers from 1 to 201
squared_numbers <- numbers * numbers
# Part 3.3 - prints the mean of the squares of numbers from 1 to 201
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Part 3.4 - prints the median of the squares of the numbers from 1 to 201
squared_median <- median(squared_numbers)
print(squared_median)
# Part 4.4 - a function that takes a name, age, and birthday (in the current
# year) as arguements, and calculates the number of days until the next
# birthday, then returns all of that information in as a string in the form of
# an introduction
make_birthday_intro <- function(name, age, birthday_in_2018){
days_to_birthday <- as.Date(birthday_in_2018,"%m/%d/%y") - Sys.Date()
if(days_to_birthday < 1){
days_to_birthday <- 365 + days_to_birthday
}
paste(make_introduction(name,age), "In", days_to_birthday ,"days, I'll be", age + 1)
}
# Part 4.5 - uses my information in the previous function to create and print
# a detailed introduction for me
my_bday_intro <- make_birthday_intro(my_name, my_age, "10/28/18")
print(my_bday_intro)
meals[5]<-(meals[["lunch"]])
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[["dinner"]] <- "Curry and Rice"
print(meals)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5]<-(meals[["lunch"]])
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Toast", "Eggs", "Juice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Pizza", "French Fries", "Milk")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[["dinner"]] <- "Curry and Rice"
print(meals)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals[[5]]<-(meals[["lunch"]])
print(meals[[5]])
meals[[5]]<-(meals[["lunch"]])
print(meals)
early_meals <-list(meals["breakfast"],meals["lunch"])
early_meals <-list(meals["breakfast"],meals["lunch"])
print(early_meals)
employees <- c(paste("Employee", 1:100, sep = " "))
paste(employees)
?runif()
course <- list (code = "INFO")
course[1]
course[[1]]
course <- list (code = "INFO")
course[code]
data("USPersonalExpenditure")
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
Expense_DataFrame <- data.frame(USPersonalExpenditure)
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
Expense_DataFrame <- data.frame(USPersonalExpenditure)
print(Expense_DataFrame)
# What are the column names of
view(Expense_DataFrame)
View(Expense_DataFrame)
colnames(Expense_DataFrame)
Expense_DataFrame$category <- rownames(Expense_DataFrame)
Expense_DataFrame
# What are the row names of your dataframe?
row.names(Expense_DataFrame)
Expense_DataFrame["Personal Care", "X1940"]
Expense_DataFrame["Food and Tobacco", "X1960]
Expense_DataFrame["Food and Tobacco", "X1960"]
Expense_DataFrame["Food and Tobacco", "X1960"]
max(Expense_DataFrame$X1960)
Expense_DataFrame == max(Expense_DataFrame$X1960)
Expense_DataFrame[Expense_DataFrame == max(Expense_DataFrame$X1960) ,"category"]
Expense_DataFrame[Expense_DataFrame == max(Expense_DataFrame$X1960) ,"category"]
Expense_DataFrame[Expense_DataFrame$X1960 == max(Expense_DataFrame$X1960) ,"category"]
Expense_DataFrame[Expense_DataFrame$X1960 == min(Expense_DataFrame$X1960) ,"category"]
Titanic[["age"]== "Child", ]
Titanic[Titanic["age"]== "Child", ]
Titanic[Titanic["age"]== "Child", ]
row.names(Titanic) <- Titanic$age
row.names(Titanic) <- Titanic["age"]
row.names(Titanic) <- Titanic[["age"]]
row.names(Titanic) <- Titanic[['age']]
# Filters the graph to only get the last 12 years worth of data
kilotons_dataset <- select(specified_countries_kilotons, ï..Country.Code,
YR2003 ,YR2004, YR2005, YR2006, YR2007, YR2008,
YR2009, YR2010, YR2011, YR2012, YR2013, YR2014)
# install.packages("ggplot2")
library("dplyr")
library("ggplot2")
library("knitr")
Print_CO2_per_capita_graph <- function(y_limit){
setwd("./data")
CO2_data <- read.csv("WDI_emissions_Data.csv", stringsAsFactors = FALSE)
setwd('..')
# install.packages("ggplot2")
library("dplyr")
library("ggplot2")
library("knitr")
Print_CO2_per_capita_graph <- function(y_limit){
setwd("./data")
CO2_data <- read.csv("WDI_emissions_Data.csv", stringsAsFactors = FALSE)
setwd('..')
only_CO2_per_capita <- filter(CO2_data, Series.Code == "EN.ATM.CO2E.PC")
richest_median_and_poorest <- filter(only_CO2_per_capita,
ï..Country.Code == "LIE" |
ï..Country.Code == "QAT" |
ï..Country.Code == "MAC" |
ï..Country.Code == "LUX" |
ï..Country.Code == "SUR" |
ï..Country.Code == "LCA" |
ï..Country.Code == "ZAF" |
ï..Country.Code == "PER" |
ï..Country.Code == "LBR" |
ï..Country.Code == "COD" |
ï..Country.Code == "BDI" |
ï..Country.Code == "CAF")
# Filters the graph to only get the last 12 years worth of data
max_med_min_dataset <- select(richest_median_and_poorest, ï..Country.Code,
YR2003 ,YR2004, YR2005, YR2006, YR2007, YR2008,
YR2009, YR2010, YR2011, YR2012, YR2013, YR2014)
# Properly organizes the dataset so that GGPlot will keep the arrangement of the X Axis from wealthiest country to least wealthiest
code_order <- c("LIE","QAT","LUX","MAC","SUR","LCA","ZAF","PER","LBR","COD","BDI","CAF")
max_med_min_dataset <- max_med_min_dataset %>% slice(match(code_order, ï..Country.Code))
GDP_order <- c(1:12)
max_med_min_dataset <- mutate(max_med_min_dataset, wealth_rank = GDP_order)
max_med_min_dataset$ï..Country.Code <- factor(
max_med_min_dataset$ï..Country.Code,
levels = max_med_min_dataset$ï..Country.Code[
order(max_med_min_dataset$wealth_rank)])
max_med_min_dataset <- data.frame(t(max_med_min_dataset[-1]))
colnames(max_med_min_dataset) <- code_order
max_med_min_dataset <- mutate(max_med_min_dataset, year = c("2003", "2004","2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", 0))
max_med_min_dataset <- max_med_min_dataset[-c(13), ]
# Produces the Graph of data from 2010 to 2014
# assigns color values to the countries for the Legend
cols <- c(  "Liechtenstein"            = "red",
"Qatar"                    = "blue",
"Luxembourg"               = "green",
"Macaou"                   = "yellow",
"Suriname"                 = "orange",
"Saint Lucia"              = "purple",
"South Africa"             = "pink",
"Peru"                     = "tan",
"Liberia"                  = "gray",
"Dem. Rep. of the Congo"   = "azure",
"Berundi"                  = "coral",
"Central African Republic" = "gold")
ggplot(data = max_med_min_dataset, aes(x = cols)) +
geom_point(mapping = aes(x = year, y = LIE, color = "Liechtenstein")) +
geom_point(mapping = aes(x = year, y = QAT, color = "Qatar"))+
geom_point(mapping = aes(x = year, y = LUX, color = "Luxembourg")) +
geom_point(mapping = aes(x = year, y = MAC, color = "Macaou")) +
geom_point(mapping = aes(x = year, y = SUR, color = "Suriname")) +
geom_point(mapping = aes(x = year, y = LCA, color = "Saint Lucia")) +
geom_point(mapping = aes(x = year, y = ZAF, color = "South Africa")) +
geom_point(mapping = aes(x = year, y = PER, color = "Peru")) +
geom_point(mapping = aes(x = year, y = LBR, color = "Liberia")) +
geom_point(mapping = aes(x = year, y = COD, color = "Dem. Rep. of the Congo")) +
geom_point(mapping = aes(x = year, y = BDI, color = "Berundi")) +
geom_point(mapping = aes(x = year, y = CAF, color = "Central African Republic")) +
ggtitle("Metric Tons of CO2 per Capita in Countries with the Highest,
Median, and Lowest GDP") +
ylab(" Metric Tons of CO2 per Capita") +
xlab("Years") +
ylim(0, 60) +
facet_grid(cols ~ .)
}
setwd("./data")
CO2_data <- read.csv("WDI_emissions_Data.csv", stringsAsFactors = FALSE)
setwd('..')
kt_of_co2_emissions <- filter(CO2_data, Series.Code == "EN.ATM.CO2E.KT")
specified_countries_kilotons <- filter(kt_of_co2_emissions,
ï..Country.Code == "LIE" |
ï..Country.Code == "QAT" |
ï..Country.Code == "MAC" |
ï..Country.Code == "LUX" |
ï..Country.Code == "SUR" |
ï..Country.Code == "LCA" |
ï..Country.Code == "ZAF" |
ï..Country.Code == "PER" |
ï..Country.Code == "LBR" |
ï..Country.Code == "COD" |
ï..Country.Code == "BDI" |
ï..Country.Code == "CAF")
# Filters the graph to only get the last 12 years worth of data
kilotons_dataset <- select(specified_countries_kilotons, ï..Country.Code,
YR2003 ,YR2004, YR2005, YR2006, YR2007, YR2008,
YR2009, YR2010, YR2011, YR2012, YR2013, YR2014)
CO2_data <- read.csv("WDI_emissions_Data.csv", stringsAsFactors = FALSE)
kt_of_co2_emissions <- filter(CO2_data, Series.Code == "EN.ATM.CO2E.KT")
setwd("./data")
CO2_data <- read.csv("WDI_emissions_Data.csv", stringsAsFactors = FALSE)
setwd('..')
kt_of_co2_emissions <- filter(CO2_data, Series.Code == "EN.ATM.CO2E.KT")
specified_countries_kilotons <- filter(kt_of_co2_emissions,
ï..Country.Code == "LIE" |
ï..Country.Code == "QAT" |
ï..Country.Code == "MAC" |
ï..Country.Code == "LUX" |
ï..Country.Code == "SUR" |
ï..Country.Code == "LCA" |
ï..Country.Code == "ZAF" |
ï..Country.Code == "PER" |
ï..Country.Code == "LBR" |
ï..Country.Code == "COD" |
ï..Country.Code == "BDI" |
ï..Country.Code == "CAF")
# Filters the graph to only get the last 12 years worth of data
kilotons_dataset <- select(specified_countries_kilotons, ï..Country.Code,
YR2003 ,YR2004, YR2005, YR2006, YR2007, YR2008,
YR2009, YR2010, YR2011, YR2012, YR2013, YR2014)
knitr::opts_chunk$set(echo = TRUE)
source("a7_script.R")
print_programming_experiance_table()
print_software_tools_experiance_table()
knitr::opts_chunk$set(echo = TRUE)
source("assignment7.r")
print_programming_experiance_table()
install.packages("shiny")  # once per machine
library("shiny")
runApp('GitHub/a8-data-app-UdayBajaj/Assignment8')
runApp('GitHub/a8-data-app-UdayBajaj/Assignment8')
library("shiny")
runApp('GitHub/a8-data-app-UdayBajaj/Assignment8')
runApp('GitHub/a8-data-app-UdayBajaj/Assignment8')
runApp('GitHub/a8-data-app-UdayBajaj/Assignment8')
=======
)
body <- content(response)
View(body)
token <- "BQAbmVMr7mZLtJnwKSMWpPRCe2A0GubRn3fR1AUSNnh5x7yYBBlr-DPBESOwLPdQF9TacBcimPiyPhbppUx5elPF5G1u7nYRB9N7uIm1a2_lFA0KtfpxXEPneNHOFLRXxspNfTBav81LfBk4"
response <- GET(
"https://api.spotify.com/v1/users/{koandcoultd}/playlists/{3cEYpjA9oz9GiPac4AsH4n}/tracks",
add_headers("Authorization" = paste("Bearer ", token))
)
body <- content(response)
View(body)
library("httr")
install.packages("RCurl")
# install.packages("RCurl")
library("RCurl") # new package we haven't used before make sure to install
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
library("jsonlite")
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
# This file is for authorizing the spotify API making requests to the API and
# making calls to the API
getwd()
setwd("~/Desktop/Info-Final-Project-Spotify")
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form")
auth_body <- content(auth)
# create token/key for all requests for the API
token <- auth_body$access_token
client_id <- "aa8e63276301419b82aae3b8fe60c5c8"
client_secret <- "3d7b821449614e5cb38e5afdbb0e5af7"
library("shiny")
source("setup.R") # run the setup file
my_server <- function(input, output) {
}
shinyServer(my_server)
library("shiny")
source("setup.R") # run the setup file
my_ui <- fluidPage(
)
shinyUI(my_ui)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
View(body)
body
library("shiny")
source("setup.R") # run the setup file
my_server <- function(input, output) {
}
shinyServer(my_server)
library("shiny")
source("setup.R") # run the setup file
my_ui <- fluidPage(
)
shinyUI(my_ui)
library("httr")
# install.packages("RCurl")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
# This file is for authorizing the spotify API making requests to the API and
# making calls to the API
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form")
auth_body <- content(auth)
# create token/key for all requests for the API
token <- auth_body$access_token
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
body
client_id <- "aa8e63276301419b82aae3b8fe60c5c8"
client_secret <- "3d7b821449614e5cb38e5afdbb0e5af7"
library("httr")
# install.packages("RCurl")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
# This file is for authorizing the spotify API making requests to the API and
# making calls to the API
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form")
auth_body <- content(auth)
# create token/key for all requests for the API
token <- auth_body$access_token
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
body
print(token)
getFeatures<-function(spotify_ID,token){
req <- httr::GET(paste0("https://api.spotify.com/v1/audio-features/",spotify_ID), add_headers(Authorization = HeaderValue))
json1<-httr::content(req)
dados=data.frame(id=json1$id,
danceability=json1$danceability,
energy=json1$energy,
key=json1$key,
loudness=json1$loudness,
mode=json1$mode,
speechiness=json1$speechiness,
acousticness=json1$acousticness,
instrumentalness=json1$instrumentalness,
liveness=json1$liveness,
valence=json1$valence,
tempo=json1$tempo,
duration_ms=json1$duration_ms,
time_signature=json1$time_signature,
uri=json1$uri,
analysis_url=json1$analysis_url,stringsAsFactors = F)
return(dados)
}
KanyeFatherStretch <- getFeatures("4KW1lqgSr8TKrvBII0Brf8")
KanyeFatherStretch <- getFeatures("4KW1lqgSr8TKrvBII0Brf8")
KanyeFatherStretch <- getFeatures("4KW1lqgSr8TKrvBII0Brf8")
DrakeNiceForWhat <- getFeatures("1cTZMwcBJT0Ka3UJPXOeeN")
getFeatures<-function(spotify_ID,token){
req <- httr::GET(paste0("https://api.spotify.com/v1/audio-features/",spotify_ID), add_headers(Authorization = HeaderValue))
json1<-httr::content(req)
dados=data.frame(id=json1$id,
danceability=json1$danceability,
energy=json1$energy,
key=json1$key,
loudness=json1$loudness,
mode=json1$mode,
speechiness=json1$speechiness,
acousticness=json1$acousticness,
instrumentalness=json1$instrumentalness,
liveness=json1$liveness,
valence=json1$valence,
tempo=json1$tempo,
duration_ms=json1$duration_ms,
time_signature=json1$time_signature,
uri=json1$uri,
analysis_url=json1$analysis_url,stringsAsFactors = F)
return(dados)
}
DrakeNiceForWhat <- getFeatures("1cTZMwcBJT0Ka3UJPXOeeN")
getFeatures<-function(spotify_ID,token){
req <- httr::GET(paste0("https://api.spotify.com/v1/audio-features/",spotify_ID), add_headers(Authorization = token))
json1<-httr::content(req)
dados=data.frame(id=json1$id,
danceability=json1$danceability,
energy=json1$energy,
key=json1$key,
loudness=json1$loudness,
mode=json1$mode,
speechiness=json1$speechiness,
acousticness=json1$acousticness,
instrumentalness=json1$instrumentalness,
liveness=json1$liveness,
valence=json1$valence,
tempo=json1$tempo,
duration_ms=json1$duration_ms,
time_signature=json1$time_signature,
uri=json1$uri,
analysis_url=json1$analysis_url,stringsAsFactors = F)
return(dados)
}
DrakeNiceForWhat <- getFeatures("1cTZMwcBJT0Ka3UJPXOeeN")
getFeatures<-function(spotify_ID,token){
req <- httr::GET(paste0("https://api.spotify.com/v1/audio-features/",spotify_ID), add_headers(Authorization = auth_body))
json1<-httr::content(req)
dados=data.frame(id=json1$id,
danceability=json1$danceability,
energy=json1$energy,
key=json1$key,
loudness=json1$loudness,
mode=json1$mode,
speechiness=json1$speechiness,
acousticness=json1$acousticness,
instrumentalness=json1$instrumentalness,
liveness=json1$liveness,
valence=json1$valence,
tempo=json1$tempo,
duration_ms=json1$duration_ms,
time_signature=json1$time_signature,
uri=json1$uri,
analysis_url=json1$analysis_url,stringsAsFactors = F)
return(dados)
}
DrakeNiceForWhat <- getFeatures("1cTZMwcBJT0Ka3UJPXOeeN")
auth_body
library("shiny")
source("setup.R") # run the setup file
my_server <- function(input, output) {
}
shinyServer(my_server)
library("httr")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form")
auth_body <- content(auth)
auth_body
# create token/key for all requests for the API
token <- auth_body$access_token
print(token)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
View(body)
View(body)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
playlist_response
client_id <- "aa8e63276301419b82aae3b8fe60c5c8"
client_secret <- "3d7b821449614e5cb38e5afdbb0e5af7"
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
playlist_response
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
playlist_response
View(body)
getFeatures<-function(spotify_ID,token){
req <- httr::GET(paste0("https://api.spotify.com/v1/audio-features/",spotify_ID), add_headers(Authorization = ))
json1<-httr::content(req)
dados=data.frame(id=json1$id,
danceability=json1$danceability,
energy=json1$energy,
key=json1$key,
loudness=json1$loudness,
mode=json1$mode,
speechiness=json1$speechiness,
acousticness=json1$acousticness,
instrumentalness=json1$instrumentalness,
liveness=json1$liveness,
valence=json1$valence,
tempo=json1$tempo,
duration_ms=json1$duration_ms,
time_signature=json1$time_signature,
uri=json1$uri,
analysis_url=json1$analysis_url,stringsAsFactors = F)
return(dados)
}
DrakeNiceForWhat <- getFeatures("1cTZMwcBJT0Ka3UJPXOeeN")
library("httr")
# install.packages("RCurl")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
# This file is for authorizing the spotify API making requests to the API and
# making calls to the API
# store client_id and client_secret in keys.R file hidden by gitignore
>>>>>>> popularity_danceability
source("keys.R")
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form")
auth_body <- content(auth)
<<<<<<< HEAD
# create token/key for all requests for the API
token <- auth_body$access_token
base_uri <- "https://api.spotify.com/v1/users/"
user_id <- "wavypaper"
playlist_id <- "37i9dQZEVXbLRQDuF5jeBp"
response_uri <- paste0(base_uri,user_id, "/playlists/",playlist_id,"/tracks")
response <- GET(
response_uri,
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(response, "text")
parsed_data <- fromJSON(body)
flat_data <- flatten(parsed_data$items)
flat_data <- arrange(flat_data, desc(track.popularity))
top_10_tracks <- slice(flat_data, 1:10)
library("httr")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
library("dplyr")
=======
auth_body
# create token/key for all requests for the API
token <- auth_body$access_token
print(token)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
playlist_response
View(body)
top50 <- fromJSON(body)
View(top50)
top50$items
View(top50$items)
top50$audio_features
song_id <- top50$track.id
View(song_id)
song_id <- top50$track$id
View(song_id)
song_id <- top50$track.id
View(song_id)
song_id <- top50$items$track$id
View(song_id)
playlist_id_response<- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add)headers("Authorization" = paste0("Bearer", token))
playlist_id_response<- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer", token))
)
playlist_id_response
View(playlist_id_response)
library("httr")
# install.packages("RCurl")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
# This file is for authorizing the spotify API making requests to the API and
# making calls to the API
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
>>>>>>> popularity_danceability
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form")
auth_body <- content(auth)
<<<<<<< HEAD
# create token/key for all requests for the API
token <- auth_body$access_token
base_uri <- "https://api.spotify.com/v1/users/"
user_id <- "wavypaper"
playlist_id <- "37i9dQZEVXbLRQDuF5jeBp"
response_uri <- paste0(base_uri,user_id, "/playlists/",playlist_id,"/tracks")
response <- GET(
response_uri,
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(response, "text")
parsed_data <- fromJSON(body)
flat_data <- flatten(parsed_data$items)
flat_data <- arrange(flat_data, desc(track.popularity))
library("httr")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
library("dplyr")
source("keys.R")
setwd("~/GitHub/Info-Final-Project-Spotify")
source("keys.R")
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
=======
auth_body
# create token/key for all requests for the API
token <- auth_body$access_token
print(token)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
playlist_response
top50 <- fromJSON(body)
View(top50)
View(top50$items)
song_id <- top50$items$track$id
View(song_id)
playlist_id_response<- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer", token))
)
View(playlist_id_response)
client_id <- "aa8e63276301419b82aae3b8fe60c5c8"
client_secret <- "3d7b821449614e5cb38e5afdbb0e5af7"
playlist_id_response<- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer", token))
)
View(playlist_id_response)
playlist_id_response
song_id
playlist_id_response<- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer", token))
)
playlist_id_response
playlist_id_response
library("httr")
# install.packages("RCurl")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form")
auth_body <- content(auth)
auth_body
# create token/key for all requests for the API
token <- auth_body$access_token
print(token)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
playlist_response
top50 <- fromJSON(body)
View(top50)
library("httr")
# install.packages("RCurl")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form")
auth_body <- content(auth)
auth_body
# create token/key for all requests for the API
token <- auth_body$access_token
print(token)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
playlist_response
top50 <- fromJSON(body)
View(top50)
library("httr")
# install.packages("RCurl")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
# This file is for authorizing the spotify API making requests to the API and
# making calls to the API
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
>>>>>>> popularity_danceability
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form")
auth_body <- content(auth)
<<<<<<< HEAD
# create token/key for all requests for the API
token <- auth_body$access_token
base_uri <- "https://api.spotify.com/v1/users/"
user_id <- "wavypaper"
playlist_id <- "37i9dQZEVXbLRQDuF5jeBp"
response_uri <- paste0(base_uri,user_id, "/playlists/",playlist_id,"/tracks")
response <- GET(
response_uri,
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(response, "text")
parsed_data <- fromJSON(body)
flat_data <- flatten(parsed_data$items)
flat_data <- arrange(flat_data, desc(track.popularity))
top_10_tracks <- slice(flat_data, 1:10)
artist_list <- top_10_tracks$track.album.artists
number_one <- as.data.frame(artist_list[1])
number_two <- as.data.frame(artist_list[2])
number_three <- as.data.frame(artist_list[3])
number_four <- as.data.frame(artist_list[4])
number_five <- as.data.frame(artist_list[5])
number_six <- as.data.frame(artist_list[6])
number_seven <- as.data.frame(artist_list[7])
number_eight<- as.data.frame(artist_list[8])
number_nine <- as.data.frame(artist_list[9])
number_ten <- as.data.frame(artist_list[10])
artist_one <- paste(number_one$name, collapse = ', ')
artist_two <- paste(number_two$name, collapse = ', ')
artist_three <- paste(number_three$name, collapse = ', ')
artist_four <- paste(number_four$name, collapse = ', ')
artist_five <- paste(number_five$name, collapse = ', ')
artist_six <- paste(number_six$name, collapse = ', ')
artist_seven <- paste(number_seven$name, collapse = ', ')
artist_eight <- paste(number_eight$name, collapse = ', ')
artist_nine <- paste(number_nine$name, collapse = ', ')
artist_ten <- paste(number_ten$name, collapse = ', ')
ordered_artists <- c(artist_one,
artist_two,
artist_three,
artist_four,
artist_five,
artist_six,
artist_seven,
artist_eight,
artist_nine,
artist_ten )
top_ten_artists <- data.frame(matrix(, nrow=10, ncol=0))
top_ten_artists <- mutate(top_ten_artists, Rank = c(1:10))
top_ten_artists <- mutate(top_ten_artists, Artists = ordered_artists)
View(top_ten_artists)
View(artist_list)
=======
auth_body
# create token/key for all requests for the API
token <- auth_body$access_token
print(token)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
body <- content(playlist_response, "text")
playlist_response
top50 <- fromJSON(body)
View(top50)
View(top50$items)
song_id <- top50$items$track$id
View(song_id)
top50_track_response <- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer ", token))
)
top50_track_response
View(top50$items)
View(top50$items)
data.frame(top50$items$track$id, top50$items$track$name, top$items$track$popularity)
data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity)
audio_features_body <- content(top50_track_response)
data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity)
audio_features_body <- content(top50_track_response)
audio_features <- fromjJSON(audio_features_body)
audio_features <- fromJSON(audio_features_body)
audio_features_body <- content(top50_track_response, "text")
audio_features <- fromJSON(audio_features_body)
View(audio_features)
top50_audio_features <- fromJSON(audio_features_body)
View(top50_audio_features)
data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, $tp50audio_features$danceability)
data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, $top50audio_features$danceability)
data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, $top50_audio_features$danceability)
data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, top50$audio_features$danceability)
top50$audio_features$danceability
data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, top50_audio_features$audio_features$danceability)
top50$audio_features$danceability
top50_audio_features$audio_features$danceability
top50_df <- data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, top50_audio_features$audio_features$danceability)
top50_audio_features$audio_features$danceability
View(top50_df)
>>>>>>> popularity_danceability
