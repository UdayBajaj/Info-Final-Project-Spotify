<<<<<<< HEAD
faceted_KT_CO2_Graph <- function(y_lower_bound, y_upper_bound){
setwd("./data")
CO2_data <- read.csv("WDI_emissions_Data.csv", stringsAsFactors = FALSE)
setwd('..')
kt_of_co2_emissions <- filter(CO2_data, Series.Code == "EN.ATM.CO2E.KT")
specified_countries_kilotons <- filter(kt_of_co2_emissions,
ï..Country.Code == "LIE" |
ï..Country.Code == "QAT" |
ï..Country.Code == "MAC" |
ï..Country.Code == "LUX" |
ï..Country.Code == "SUR" |
ï..Country.Code == "LCA" |
ï..Country.Code == "ZAF" |
ï..Country.Code == "PER" |
ï..Country.Code == "LBR" |
ï..Country.Code == "COD" |
ï..Country.Code == "BDI" |
ï..Country.Code == "CAF")
# Filters the graph to only get the last 12 years worth of data
kilotons_dataset <- select(specified_countries_kilotons, ï..Country.Code,
YR2003 ,YR2004, YR2005, YR2006, YR2007, YR2008,
YR2009, YR2010, YR2011, YR2012, YR2013, YR2014)
#converts data to long format
long_data <- gather(kilotons_dataset, Year, Kt_of_CO2, YR2003:YR2014,
factor_key = TRUE)
# creates vector for graph lables
years <- c("03", "04", "05", "06", "07", "08", "09", "10",
"11", "12", "13", "14")
# Plots the data points and creates the graph
ggplot(data = long_data) +
geom_point(mapping = aes (x = Year, y = Kt_of_CO2, color = ï..Country.Code)) +
facet_wrap(~ï..Country.Code) +
ggtitle(" Overall Kilotons of CO2 Produced in Countries with the Highest,
Median, and lowest GDP") +
ylab("KiloTons of CO2 Produced") +
xlab("Years (20xx)") +
scale_x_discrete(labels = years) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_discrete(name = "Country Codes") +
ylim(y_lower_bound, y_upper_bound)
}
faceted_KT_CO2_Graph(0,510000)
faceted_KT_CO2_Graph <- function(y_lower_bound, y_upper_bound){
setwd("./data")
CO2_data <- read.csv("WDI_emissions_Data.csv", stringsAsFactors = FALSE)
setwd('..')
kt_of_co2_emissions <- filter(CO2_data, Series.Code == "EN.ATM.CO2E.KT")
specified_countries_kilotons <- filter(kt_of_co2_emissions,
ï..Country.Code == "LIE" |
ï..Country.Code == "QAT" |
ï..Country.Code == "MAC" |
ï..Country.Code == "LUX" |
ï..Country.Code == "SUR" |
ï..Country.Code == "LCA" |
ï..Country.Code == "ZAF" |
ï..Country.Code == "PER" |
ï..Country.Code == "LBR" |
ï..Country.Code == "COD" |
ï..Country.Code == "BDI" |
ï..Country.Code == "CAF")
# Filters the graph to only get the last 12 years worth of data
kilotons_dataset <- select(specified_countries_kilotons, ï..Country.Code,
YR2003 ,YR2004, YR2005, YR2006, YR2007, YR2008,
YR2009, YR2010, YR2011, YR2012, YR2013, YR2014)
#converts data to long format
long_data <- gather(kilotons_dataset, Year, Kt_of_CO2, YR2003:YR2014,
factor_key = TRUE)
# creates vector for graph lables
years <- c("03", "04", "05", "06", "07", "08", "09", "10",
"11", "12", "13", "14")
# Plots the data points and creates the graph
ggplot(data = long_data) +
geom_point(mapping = aes (x = Year, y = Kt_of_CO2, color = ï..Country.Code)) +
facet_wrap(~ï..Country.Code) +
ggtitle(" Overall Kilotons of CO2 Produced in Countries with the Highest,
Median, and lowest GDP") +
ylab("KiloTons of CO2 Produced") +
xlab("Years (20xx)") +
scale_x_discrete(labels = years) +
theme(axis.text.x = element_text(angle = 45)) +
scale_fill_discrete(name = "Country Codes") +
ylim(y_lower_bound, y_upper_bound)
}
faceted_KT_CO2_Graph(0,510000)
faceted_KT_CO2_Graph(0,100000)
faceted_KT_CO2_Graph(0,10000)
faceted_KT_CO2_Graph(0,5000)
faceted_KT_CO2_Graph(0,10000)
faceted_KT_CO2_Graph(0,20000)
faceted_KT_CO2_Graph(0,5000)
faceted_KT_CO2_Graph(0,3000)
country_order_table()
print_global_ktCO2_map()
print_interactive_graph()
world_emissions <- mutate(world_emissions, bin = bins)
setwd("./data")
CO2_data <- read.csv("WDI_emissions_Data.csv", stringsAsFactors = FALSE)
GDP_Ranking <- read.csv("Countries_GDP_Rank.csv", stringsAsFactors = FALSE)
setwd('..')
kt_of_co2_emissions <- filter(CO2_data, Series.Code == "EN.ATM.CO2E.KT")
world_emissions <- right_join(kt_of_co2_emissions, GDP_Ranking, by = "ï..Country.Code")
# creates the bins based on KT of CO2 and places every country into a bin
breaks <- c(0, 8000, 18000, 40000, 90000, 150000, 250000, 99999999999)
labels <- c("<8,000 kt", "8,000 - 18,000 kt", "18,000 - 40,000 kt",
"40,000 - 90,000 kt", "90,000 - 150,000 kt",
"150,000 - 250,000 kt", "200,000 kt <" )
bins <- cut(world_emissions$YR2014, breaks, include.lowest = TRUE, right = FALSE, labels = labels)
world_emissions <- mutate(world_emissions, bin = bins)
print_interactive_graph <- function(){
setwd("./data")
CO2_data <- read.csv("WDI_emissions_Data.csv", stringsAsFactors = FALSE)
GDP_Ranking <- read.csv("Countries_GDP_Rank.csv", stringsAsFactors = FALSE)
setwd('..')
kt_of_co2_emissions <- filter(CO2_data, Series.Code == "EN.ATM.CO2E.KT")
world_emissions <- right_join(kt_of_co2_emissions, GDP_Ranking, by = "ï..Country.Code")
# creates the bins based on KT of CO2 and places every country into a bin
breaks <- c(0, 8000, 18000, 40000, 90000, 150000, 250000, 99999999999)
labels <- c("<8,000 kt", "8,000 - 18,000 kt", "18,000 - 40,000 kt",
"40,000 - 90,000 kt", "90,000 - 150,000 kt",
"150,000 - 250,000 kt", "200,000 kt <" )
bins <- cut(world_emissions$YR2014, breaks, include.lowest = TRUE, right = FALSE, labels = labels)
world_emissions <- mutate(world_emissions, bin = bins)
plot_ly (
type = 'scatter',
x = world_emissions$GDP.per.Capita.Rank,
y = world_emissions$YR2014,
text = paste(
"Country: ", world_emissions$ï..Country.Code,
"<br>GDP/capita Rank: ", world_emissions$GDP.per.Capita.Rank,
"<br>Kilotons of CO2 produced: ", world_emissions$YR2014),
"<br>Group: ", world_emissions$bin,
hoverinfo = text,
mode = 'markers',
transforms = list(
list(
type = 'groupby',
groups = world_emissions$bin,
styles = list(
list(target = "<8,000 kt", value = list(marker =list(color = 'blue'))),
list(target = "8,000 - 18,000 kt", value = list(marker =list(color = 'red'))),
list(target = "18,000 - 40,000 kt", value = list(marker =list(color = 'black'))),
list(target = "40,000 - 90,000 kt", value = list(marker =list(color = 'green'))),
list(target = "90,000 - 150,000 kt", value = list(marker =list(color = 'yellow'))),
list(target = "150,000 - 250,000 kt", value = list(marker =list(color = 'purple'))),
list(target = "200,000 kt <", value = list(marker =list(color = 'orange')))
=======
flat_data <- flatten(parsed_data$items)
# Organizes the tracks by popularity and passes the 10 most popular tracks to a
# Seperate dataset
flat_data <- arrange(flat_data, desc(track.popularity))
top_10_tracks <- slice(flat_data, 1:10)
# Seperates out the nested list of artist data by each artist allowing for
# reading and data manipulation
artist_list <- top_10_tracks$track.album.artists
number_one <- as.data.frame(artist_list[1])
number_two <- as.data.frame(artist_list[2])
number_three <- as.data.frame(artist_list[3])
number_four <- as.data.frame(artist_list[4])
number_five <- as.data.frame(artist_list[5])
number_six <- as.data.frame(artist_list[6])
number_seven <- as.data.frame(artist_list[7])
number_eight<- as.data.frame(artist_list[8])
number_nine <- as.data.frame(artist_list[9])
number_ten <- as.data.frame(artist_list[10])
# returns the name of the artist(s) that worked on each song
artist_one <- paste(number_one$name, collapse = ', ')
artist_two <- paste(number_two$name, collapse = ', ')
artist_three <- paste(number_three$name, collapse = ', ')
artist_four <- paste(number_four$name, collapse = ', ')
artist_five <- paste(number_five$name, collapse = ', ')
artist_six <- paste(number_six$name, collapse = ', ')
artist_seven <- paste(number_seven$name, collapse = ', ')
artist_eight <- paste(number_eight$name, collapse = ', ')
artist_nine <- paste(number_nine$name, collapse = ', ')
artist_ten <- paste(number_ten$name, collapse = ', ')
# creates a vector of artist names that will be passed into a dataframe
ordered_artists <- c(artist_one,
artist_two,
artist_three,
artist_four,
artist_five,
artist_six,
artist_seven,
artist_eight,
artist_nine,
artist_ten )
# initializes and creates a dataframw with the popularity ranking of artists
# based on the most popular songs on spotify
top_ten_artists <- data.frame(matrix(, nrow=10, ncol=0))
top_ten_artists <- mutate(top_ten_artists, Rank = c(1:10))
top_ten_artists <- mutate(top_ten_artists, Artists = ordered_artists)
View(top_ten_artists)
#################
### Daniel's ####
#################
# Make an API request to Spotify for the desired data (Top 50 U.S. Chart playlist)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpack the JSON data and make it readable
body <- content(playlist_response, "text")
top50 <- fromJSON(body)
# Get the audio features for the Top 50 U.S. Chart playlist
top50_track_response <- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpack the JSON data for audio features and make it readable
audio_features_body <- content(top50_track_response, "text")
top50_audio_features <- fromJSON(audio_features_body)
# Store song id, track name, popularity, danceability into a data frame
top50_df <- data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, top50_audio_features$audio_features$danceability)
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "Top 50 Tracks")) +
geom_smooth(method = "lm") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability", color = "Top 50 US Chart") +
xlim(60,100) +
ylim(0,1)
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "Top 50 Tracks")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability", color = "Top 50 US Chart") +
xlim(60,100) +
ylim(0.2,1)
popularity_plot
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "Top 50 Tracks")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability", color = "Top 50 US Chart") +
xlim(70,100) +
ylim(0.2,1)
popularity_plot
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "Top 50 Tracks")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability", color = "Top 50 US Chart") +
xlim(75,100) +
ylim(0.2,1)
popularity_plot
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpack the JSON data and make it readable
body <- content(playlist_response, "text")
top50 <- fromJSON(body)
song_id <- top50$items$track$id
# Get the audio features for the Top 50 U.S. Chart playlist
top50_track_response <- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpack the JSON data for audio features and make it readable
audio_features_body <- content(top50_track_response, "text")
top50_audio_features <- fromJSON(audio_features_body)
# Store song id, track name, popularity, danceability into a data frame
top50_df <- data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, top50_audio_features$audio_features$danceability)
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "Top 50 Tracks")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability", color = "Top 50 US Chart") +
xlim(75,100) +
ylim(0.2,1)
library("httr")
# install.packages("RCurl")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
library("dplyr")
library("ggplot2")
# This file is for authorizing the spotify API making requests to the API and
# making calls to the API
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form"
>>>>>>> b0e2566b0564cbe8e92de8327326dc55766258c0
)
auth_body <- content(auth)
auth_body
# create token/key for all requests for the API
token <- auth_body$access_token
##################
##################
# Even's Section #
##################
##################
### The following get requests are each for playlists created by spotify
### which are representative of a popular music for a specific music genre
# get rap caviar playlist by spotify
# these tracks represent the hip hop genre
hiphop_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DX0XUsuxWHRQd/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
hiphop_body <- content(hiphop_response, "text")
hiphop_data <- fromJSON(hiphop_body)
# get mega hit mix playlist by spotify
# these tracks represent the pop genre
pop_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DXbYM3nMM0oPk/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
pop_body <- content(pop_response, "text")
pop_data <- fromJSON(pop_body)
# get mint playlist by spotify
# these tracks represent the electronic genre
electro_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DX4dyzvuaRJ0n/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
electro_body <- content(electro_response, "text")
electro_data <- fromJSON(electro_body)
# get rock this playlist by spotify
# these tracks represent the rock genre
rock_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DXcF6B6QPhFDv/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
rock_body <- content(rock_response, "text")
rock_data <- fromJSON(rock_body)
# get hot country playlist by spotify
# these tracks represent the country genre
country_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DX1lVhptIYRda/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
country_body <- content(country_response, "text")
country_data <- fromJSON(country_body)
# format the first 20 track id's from each playlist into one vector
genre_track_ids <- c(
pop_data$items$track$id[1:20],
hiphop_data$items$track$id[1:20],
electro_data$items$track$id[1:20],
rock_data$items$track$id[1:20],
country_data$items$track$id[1:20]
)
# get the audio features for the 100 sampled songs
genre_track_response <- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(genre_track_ids, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer ", token))
)
genre_track_body <- content(genre_track_response, "text")
genre_track_data <- fromJSON(genre_track_body)
# store the vector of danceability values for the tracks
genre_danceability <- genre_track_data$audio_features$danceability
# create vector of the mean danceability values for each genre from the
# sampled tracks. Order corresponds to: pop, hiphop, electronic, rock, country
average_danceability <- c(
mean(genre_danceability[1:20], na.rm = TRUE),
mean(genre_danceability[21:40], na.rm = TRUE),
mean(genre_danceability[41:60], na.rm = TRUE),
mean(genre_danceability[61:80], na.rm = TRUE),
mean(genre_danceability[81:100], na.rm = TRUE)
)
genre_dance_df <- data.frame("genre" = c("Pop",
"Hip Hop",
"Electronic",
"Rock",
"Country"),
average_danceability)
##################
##################
# Uday's Section #
##################
##################
#creates the URI that will be used in the Get Request
base_uri <- "https://api.spotify.com/v1/users/"
user_id <- "wavypaper"
playlist_id <- "37i9dQZEVXbLRQDuF5jeBp"
response_uri <- paste0(base_uri,user_id, "/playlists/",playlist_id,"/tracks")
# Makes an API request to Spotify for the desired data
response <- GET(
response_uri,
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpakcs the JSON data and makes it readable
body <- content(response, "text")
parsed_data <- fromJSON(body)
flat_data <- flatten(parsed_data$items)
# Organizes the tracks by popularity and passes the 10 most popular tracks to a
# Seperate dataset
flat_data <- arrange(flat_data, desc(track.popularity))
top_10_tracks <- slice(flat_data, 1:10)
# Seperates out the nested list of artist data by each artist allowing for
# reading and data manipulation
artist_list <- top_10_tracks$track.album.artists
number_one <- as.data.frame(artist_list[1])
number_two <- as.data.frame(artist_list[2])
number_three <- as.data.frame(artist_list[3])
number_four <- as.data.frame(artist_list[4])
number_five <- as.data.frame(artist_list[5])
number_six <- as.data.frame(artist_list[6])
number_seven <- as.data.frame(artist_list[7])
number_eight<- as.data.frame(artist_list[8])
number_nine <- as.data.frame(artist_list[9])
number_ten <- as.data.frame(artist_list[10])
# returns the name of the artist(s) that worked on each song
artist_one <- paste(number_one$name, collapse = ', ')
artist_two <- paste(number_two$name, collapse = ', ')
artist_three <- paste(number_three$name, collapse = ', ')
artist_four <- paste(number_four$name, collapse = ', ')
artist_five <- paste(number_five$name, collapse = ', ')
artist_six <- paste(number_six$name, collapse = ', ')
artist_seven <- paste(number_seven$name, collapse = ', ')
artist_eight <- paste(number_eight$name, collapse = ', ')
artist_nine <- paste(number_nine$name, collapse = ', ')
artist_ten <- paste(number_ten$name, collapse = ', ')
# creates a vector of artist names that will be passed into a dataframe
ordered_artists <- c(artist_one,
artist_two,
artist_three,
artist_four,
artist_five,
artist_six,
artist_seven,
artist_eight,
artist_nine,
artist_ten )
# initializes and creates a dataframw with the popularity ranking of artists
# based on the most popular songs on spotify
top_ten_artists <- data.frame(matrix(, nrow=10, ncol=0))
top_ten_artists <- mutate(top_ten_artists, Rank = c(1:10))
top_ten_artists <- mutate(top_ten_artists, Artists = ordered_artists)
View(top_ten_artists)
#################
### Daniel's ####
#################
# Make an API request to Spotify for the desired data (Top 50 U.S. Chart playlist)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpack the JSON data and make it readable
body <- content(playlist_response, "text")
top50 <- fromJSON(body)
song_id <- top50$items$track$id
# Get the audio features for the Top 50 U.S. Chart playlist
top50_track_response <- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer ", token))
)
<<<<<<< HEAD
}
print_interactive_graph()
print_interactive_graph()
shiny::runApp('~/GitHub/Info-Final-Project-Spotify')
shiny::runApp()
library("httr")
# install.packages("RCurl")
library("RCurl") # new package we haven't used before make sure to install
library("jsonlite")
library("dplyr")
library("ggplot2")
# This file is for authorizing the spotify API making requests to the API and
# making calls to the API
# store client_id and client_secret in keys.R file hidden by gitignore
source("keys.R")
# format project id for authorization with the API
id_secret <- base64(paste(client_id, client_secret, sep = ":"))
# authorize project with API
auth <- POST("https://accounts.spotify.com/api/token",
add_headers("Authorization" = paste0("Basic ", id_secret)),
body = list(grant_type = "client_credentials"),
encode = "form"
)
auth_body <- content(auth)
auth_body
# create token/key for all requests for the API
token <- auth_body$access_token
##################
##################
# Even's Section #
##################
##################
### The following get requests are each for playlists created by spotify
### which are representative of a popular music for a specific music genre
# get rap caviar playlist by spotify
# these tracks represent the hip hop genre
hiphop_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DX0XUsuxWHRQd/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
hiphop_body <- content(hiphop_response, "text")
hiphop_data <- fromJSON(hiphop_body)
# get mega hit mix playlist by spotify
# these tracks represent the pop genre
pop_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DXbYM3nMM0oPk/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
pop_body <- content(pop_response, "text")
pop_data <- fromJSON(pop_body)
# get mint playlist by spotify
# these tracks represent the electronic genre
electro_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DX4dyzvuaRJ0n/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
electro_body <- content(electro_response, "text")
electro_data <- fromJSON(electro_body)
# get rock this playlist by spotify
# these tracks represent the rock genre
rock_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DXcF6B6QPhFDv/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
rock_body <- content(rock_response, "text")
rock_data <- fromJSON(rock_body)
# get hot country playlist by spotify
# these tracks represent the country genre
country_response <- GET(
"https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DX1lVhptIYRda/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
country_body <- content(country_response, "text")
country_data <- fromJSON(country_body)
# format the first 20 track id's from each playlist into one vector
genre_track_ids <- c(
pop_data$items$track$id[1:20],
hiphop_data$items$track$id[1:20],
electro_data$items$track$id[1:20],
rock_data$items$track$id[1:20],
country_data$items$track$id[1:20]
)
# get the audio features for the 100 sampled songs
genre_track_response <- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(genre_track_ids, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer ", token))
)
genre_track_body <- content(genre_track_response, "text")
genre_track_data <- fromJSON(genre_track_body)
# store the vector of danceability values for the tracks
genre_danceability <- genre_track_data$audio_features$danceability
# create vector of the mean danceability values for each genre from the
# sampled tracks. Order corresponds to: pop, hiphop, electronic, rock, country
average_danceability <- c(
mean(genre_danceability[1:20], na.rm = TRUE),
mean(genre_danceability[21:40], na.rm = TRUE),
mean(genre_danceability[41:60], na.rm = TRUE),
mean(genre_danceability[61:80], na.rm = TRUE),
mean(genre_danceability[81:100], na.rm = TRUE)
)
genre_dance_df <- data.frame("genre" = c("Pop",
"Hip Hop",
"Electronic",
"Rock",
"Country"),
average_danceability)
##################
##################
# Uday's Section #
##################
##################
# creates the URI that will be used in the Get Request
base_uri <- "https://api.spotify.com/v1/users/"
user_id <- "wavypaper"
# The Get Request is getting the top 50 charts
playlist_id <- "37i9dQZEVXbLRQDuF5jeBp"
response_uri <- paste0(base_uri,user_id, "/playlists/",playlist_id,"/tracks")
# Makes an API request to Spotify for the desired data
response <- GET(
response_uri,
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpacks the JSON data and makes it readable
body <- content(response, "text")
parsed_data <- fromJSON(body)
flat_data <- flatten(parsed_data$items)
# Organizes the tracks by popularity and passes the 10 most popular tracks to a
# Seperate dataset
flat_data <- arrange(flat_data, desc(track.popularity))
top_10_tracks <- slice(flat_data, 1:10)
# Seperates out the nested list of artist data by each artist allowing for
# reading and data manipulation
artist_list <- top_10_tracks$track.album.artists
number_one <- as.data.frame(artist_list[1])
number_two <- as.data.frame(artist_list[2])
number_three <- as.data.frame(artist_list[3])
number_four <- as.data.frame(artist_list[4])
number_five <- as.data.frame(artist_list[5])
number_six <- as.data.frame(artist_list[6])
number_seven <- as.data.frame(artist_list[7])
number_eight<- as.data.frame(artist_list[8])
number_nine <- as.data.frame(artist_list[9])
number_ten <- as.data.frame(artist_list[10])
# returns the name of the artist(s) that worked on each song
artist_one <- paste(number_one$name, collapse = ', ')
artist_two <- paste(number_two$name, collapse = ', ')
artist_three <- paste(number_three$name, collapse = ', ')
artist_four <- paste(number_four$name, collapse = ', ')
artist_five <- paste(number_five$name, collapse = ', ')
artist_six <- paste(number_six$name, collapse = ', ')
artist_seven <- paste(number_seven$name, collapse = ', ')
artist_eight <- paste(number_eight$name, collapse = ', ')
artist_nine <- paste(number_nine$name, collapse = ', ')
artist_ten <- paste(number_ten$name, collapse = ', ')
# creates a vector of artist names that will be passed into a dataframe
ordered_artists <- c(artist_one,
artist_two,
artist_three,
artist_four,
artist_five,
artist_six,
artist_seven,
artist_eight,
artist_nine,
artist_ten )
# initializes and creates a dataframe with the popularity ranking of artists
# based on the most popular songs on spotify
top_ten_artists <- data.frame(matrix(, nrow=10, ncol=0))
top_ten_artists <- mutate(top_ten_artists, Rank = c(1:10))
top_ten_artists <- mutate(top_ten_artists, Artists = ordered_artists)
#################
### Daniel's ####
#################
# Make an API request to Spotify for the desired data (Top 50 U.S. Chart playlist)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpack the JSON data and make it readable
body <- content(playlist_response, "text")
top50 <- fromJSON(body)
# Get the audio features for the Top 50 U.S. Chart playlist
top50_track_response <- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer ", token))
)
=======
>>>>>>> b0e2566b0564cbe8e92de8327326dc55766258c0
# Unpack the JSON data for audio features and make it readable
audio_features_body <- content(top50_track_response, "text")
top50_audio_features <- fromJSON(audio_features_body)
# Store song id, track name, popularity, danceability into a data frame
top50_df <- data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, top50_audio_features$audio_features$danceability)
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "Top 50 Tracks")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability", color = "Top 50 US Chart") +
xlim(75,100) +
ylim(0.2,1)
<<<<<<< HEAD
#################
### Daniel's ####
#################
# Make an API request to Spotify for the desired data (Top 50 U.S. Chart playlist)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpack the JSON data and make it readable
body <- content(playlist_response, "text")
top50 <- fromJSON(body)
# Get the audio features for the Top 50 U.S. Chart playlist
top50_track_response <- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpack the JSON data for audio features and make it readable
audio_features_body <- content(top50_track_response, "text")
top50_audio_features <- fromJSON(audio_features_body)
# Store song id, track name, popularity, danceability into a data frame
top50_df <- data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, top50_audio_features$audio_features$danceability)
=======
pop
popularity_plot
library("plotly")
p <- plot_ly(data = top50_df, x = ~Popularity, y = ~Danceability, type = 'scatter',
mode = 'markers', symbol = ~Species, symbols = c('circle'),
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~Species, symbols = c('circle'),
color = I('black'), marker = list(size = 10))
p
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~top50$items$track$name, symbols = c('circle'),
color = I('black'), marker = list(size = 10))
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~top50$items$track$name, symbols = c('circle'),
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
layout = go.Layout(showlegend=False),
mode = 'markers', symbol = ~top50$items$track$name, symbols = c('circle'),
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
layout = go.Layout(showlegend=False),
mode = 'markers', symbol = ~top50$items$track$name, symbols = "circle",
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~top50$items$track$name, symbols = "circle",
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~top50$items$track$name, symbols = "x",
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("x"),
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("x"),
color = I('black'), marker = list(size = 8))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("x"),
color = I('black'), marker = list(size = 12))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter')
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter')
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("x"),
color = I('black'), marker = list(size = 12))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("x"),
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter',
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("circles"),
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter', showscale = FALSE,
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("circles"),
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter', showlegend = FALSE,
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("circles"),
color = I('black'), marker = list(size = 10))
p
p <- plot_ly(data = top50_df, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter', showlegend = FALSE,
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("circle"),
color = I('black'), marker = list(size = 10))
p
top50_df2 <- data.frame(top50$items$track$name, top50$items$track$popularity, top50_audio_features$audio_features$danceability)
p <- plot_ly(data = top50_df2, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter', showlegend = FALSE,
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("circle"),
color = I('black'), marker = list(size = 10))
p
popularity_plot
p <- ggplotly(popularity_plot)
>>>>>>> b0e2566b0564cbe8e92de8327326dc55766258c0
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "Top 50 Tracks")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability", color = "Top 50 US Chart") +
xlim(75,100) +
ylim(0.2,1)
<<<<<<< HEAD
#################
### Daniel's ####
#################
# Make an API request to Spotify for the desired data (Top 50 U.S. Chart playlist)
playlist_response <- GET(
"https://api.spotify.com/v1/users/spotifycharts/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks",
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpack the JSON data and make it readable
body <- content(playlist_response, "text")
top50 <- fromJSON(body)
song_id <- top50$items$track$id
# Get the audio features for the Top 50 U.S. Chart playlist
top50_track_response <- GET(
paste0(
"https://api.spotify.com/v1/audio-features/?ids=",
paste0(song_id, collapse = ",")
),
add_headers("Authorization" = paste0("Bearer ", token))
)
# Unpack the JSON data for audio features and make it readable
audio_features_body <- content(top50_track_response, "text")
top50_audio_features <- fromJSON(audio_features_body)
# Store song id, track name, popularity, danceability into a data frame
top50_df <- data.frame(top50$items$track$id, top50$items$track$name, top50$items$track$popularity, top50_audio_features$audio_features$danceability)
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "Top 50 Tracks")) +
=======
popularity_plot
p <- ggplotly(popularity_plot)
p
pp <- plot_ly(data = top50_df2, x = ~top50$items$track$popularity, y = ~top50_audio_features$audio_features$danceability, type = 'scatter', showlegend = FALSE,
mode = 'markers', symbol = ~top50$items$track$name, symbols = c("circle"),
color = I('black'), marker = list(size = 10))
pp
p
p
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
>>>>>>> b0e2566b0564cbe8e92de8327326dc55766258c0
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability", color = "Top 50 US Chart") +
xlim(75,100) +
ylim(0.2,1)
<<<<<<< HEAD
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
p <- ggplotly(popularity_plot)
p
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "red")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability", color = "Top 50 US Chart") +
xlim(75,100) +
ylim(0.2,1)
p <- ggplotly(popularity_plot)
p
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "red")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability") +
xlim(75,100) +
ylim(0.2,1)
p <- ggplotly(popularity_plot)
p
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "red")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability") +
xlim(75,100) +
ylim(0.25,1)
p <- ggplotly(popularity_plot)
p
# Create scatter plot for data frame via ggplot2
popularity_plot <- ggplot(top50_df, aes(x = top50$items$track$popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability") +
xlim(75,100) +
ylim(0.25,1)
p <- ggplotly(popularity_plot)
p
# Create scatter plot for data frame via ggplot2
popularity <- top50$items$track$popularity
popularity_plot <- ggplot(top50_df, aes(x = popularity, y = top50_audio_features$audio_features$danceability)) +
geom_point(aes(color = "")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability") +
xlim(75,100) +
ylim(0.25,1)
p <- ggplotly(popularity_plot)
p
danceability <- top50_audio_features$audio_features$danceability
popularity_plot <- ggplot(top50_df, aes(x = popularity, y = danceability)) +
geom_point(aes(color = "")) +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability") +
xlim(75,100) +
ylim(0.25,1)
popularity_plot <- ggplot(top50_df, aes(x = popularity, y = danceability)) +
geom_point(mapping = NULL, data = NULL, stat = "identity") +
geom_smooth(method = "lm") +
theme(legend.position="none") +
labs(title = "Top 50 United States Chart: Popularity vs. Danceability", x = "Popularity", y = "Danceability") +
xlim(75,100) +
ylim(0.25,1)
p <- ggplotly(popularity_plot)
p
>>>>>>> b0e2566b0564cbe8e92de8327326dc55766258c0
